import { useState, useEffect } from "react";
import pixelCookieImage from "../assets/pixel-cookie.png";
import useFortuneMessage from "../hooks/useFortuneMessage";

export default function FortuneCookie() {
  const [isOpen, setIsOpen] = useState(false);
  const [typedFortune, setTypedFortune] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const { fortune, getNewFortune } = useFortuneMessage();
  
  // Typewriter effect
  useEffect(() => {
    if (isOpen && fortune) {
      setIsTyping(true);
      setTypedFortune("");
      
      let i = 0;
      const typeInterval = setInterval(() => {
        if (i <= fortune.length) {
          setTypedFortune(fortune.substring(0, i));
          i++;
        } else {
          clearInterval(typeInterval);
          setIsTyping(false);
        }
      }, 40); // typing speed
      
      return () => clearInterval(typeInterval);
    }
  }, [isOpen, fortune]);

  const handleOpenCookie = () => {
    if (!isOpen) {
      // Add computer processing sound effect
      const computerBeep = new Audio("data:audio/wav;base64,UklGRrwAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YZgAAAAAAAAAAAAAAAAAAAAA/v7+//7+/v/+/v7/AAAAAAEBAQECAgICAwMDAwQEBAQFBQUFBgYGBgcHBwcICAgICQkJCQoKCgoLCwsLCgoKCgkJCQkICAgIBwcHBwYGBgYFBQUFBAQEBAMDAwMCAgICAQEBAQAAAAD+/v7//v7+//v7+//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==");
      computerBeep.volume = 0.2;
      computerBeep.play();
      
      setIsOpen(true);
      getNewFortune();
    }
  };

  const handleGetNewFortune = () => {
    setIsOpen(false);
  };

  return (
    <div className="text-center">
      {/* Simple Prompt */}
      {!isOpen && (
        <div className="text-center mb-2">
          <p className="text-sm text-[#00FF00] terminal-text">
            <span className="animate-pulse">CLICK COOKIE TO DETECT FORTUNE</span>
            <span className="blinking-cursor ml-1">█</span>
          </p>
        </div>
      )}

      {/* Cookie Image (Closed) */}
      {!isOpen && (
        <div 
          className="inline-block cursor-pointer relative mb-2"
          onClick={handleOpenCookie}
          style={{
            filter: 'drop-shadow(0 0 8px rgba(0, 255, 0, 0.7))',
            transition: 'all 0.3s ease'
          }}
        >
          <div className="pixel-art">
            <img 
              src={pixelCookieImage} 
              alt="Pixel Fortune Cookie" 
              className="w-40 h-auto"
              style={{ imageRendering: 'pixelated' }} 
            />
          </div>
          {/* Retro CRT scanning line effect */}
          <div className="absolute inset-0 pointer-events-none opacity-40 scanning-line"
            style={{
              backgroundImage: 'linear-gradient(transparent 50%, rgba(0, 255, 0, 0.1) 50%)',
              backgroundSize: '4px 4px',
            }}
          ></div>
        </div>
      )}
      
      {/* Cookie Image (Open) */}
      {isOpen && (
        <div className="animate-fade-in relative mb-2">
          <div className="pixel-art transform rotate-45">
            <img 
              src={pixelCookieImage} 
              alt="Pixel Fortune Cookie Open" 
              className="w-40 h-auto"
              style={{ 
                imageRendering: 'pixelated',
                filter: 'drop-shadow(0 0 10px rgba(229, 9, 20, 0.7))'
              }} 
            />
          </div>
        </div>
      )}

      {/* Fortune Message - 80s Computer Terminal */}
      {isOpen && (
        <div className="animate-fade-in mt-4 p-3 bg-black rounded-sm border-2 border-[#00FF00] shadow-[0_0_15px_rgba(0,255,0,0.5)]">
          <div className="text-left p-2 bg-[#001100] border border-[#00FF00]">
            <p className="retro-text text-lg md:text-xl">
              {typedFortune}
              <span className={isTyping ? "animate-pulse" : "opacity-0"}>█</span>
            </p>
          </div>
        </div>
      )}

      {/* Action Button - CRT Style */}
      {isOpen && (
        <div className="text-center mt-4 animate-fade-in">
          <button 
            className="retro-button"
            onClick={handleGetNewFortune}
          >
            GENERATE NEW FORTUNE
          </button>
        </div>
      )}
    </div>
  );
}